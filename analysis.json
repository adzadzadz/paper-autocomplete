{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "paper-autocomplete-suggestions.js",
      "properties": [
        {
          "name": "for",
          "type": "string | null | undefined",
          "description": "Id of input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 4
            },
            "end": {
              "line": 225,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "isOpen",
          "type": "boolean | null | undefined",
          "description": "`true` if the suggestions list is open, `false otherwise`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 234,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "minLength",
          "type": "number | null | undefined",
          "description": "Minimum length to trigger suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maxViewableItems",
          "type": "number | null | undefined",
          "description": "Max number of suggestions to be displayed without scrolling",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 250,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "7"
        },
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the text property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\""
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the value property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "source",
          "type": "Array | null | undefined",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 273,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "selectedOption",
          "type": "Object | null | undefined",
          "description": "Object containing information about the current selected option. The structure of the object depends on the\n structure of each element in the data source.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 282,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "remoteSource",
          "type": "boolean | null | undefined",
          "description": "Binds to a remote data source",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "eventNamespace",
          "type": "string | null | undefined",
          "description": "Event type separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 4
            },
            "end": {
              "line": 298,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"-\""
        },
        {
          "name": "highlightedSuggestion",
          "type": "Object | null | undefined",
          "description": "Current highlighted suggestion. The structure of the object is:\n```\n{\n   elementId: ID // id of the highlighted DOM element\n   option: // highlighted option data\n}\n```",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 4
            },
            "end": {
              "line": 313,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}"
        },
        {
          "name": "queryFn",
          "type": "Function | null | undefined",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 5
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          }
        },
        {
          "name": "highlightFirst",
          "type": "boolean | null | undefined",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 4
            },
            "end": {
              "line": 329,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showResultsOnFocus",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 338,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_suggestions",
          "type": "Array | null | undefined",
          "description": "`_suggestions` Array with the actual suggestions to display",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 346,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_onSuggestionsChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_currentIndex",
          "type": "number | null | undefined",
          "description": "Indicates the position in the suggestions popup of the currently highlighted element, being `0` the first one,\nand `this._suggestions.length - 1` the position of the last one.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "-1"
        },
        {
          "name": "_scrollIndex",
          "type": "number | null | undefined",
          "description": "Indicates the current position of the scroll. Then the `scrollTop` position is calculated multiplying the\n`_itemHeight` with the current index.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 361,
              "column": 4
            },
            "end": {
              "line": 364,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "_itemHeight",
          "type": "number | null | undefined",
          "description": "Height of each suggestion element in pixels",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 369,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_itemHeightChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "36"
        },
        {
          "name": "_value",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 375,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_text",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 379,
              "column": 4
            },
            "end": {
              "line": 381,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_idItemSeed",
          "type": "string | null | undefined",
          "description": "This value is used as a base to generate unique individual ids that need to be added to each suggestion for\naccessibility reasons.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 387,
              "column": 4
            },
            "end": {
              "line": 391,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_bindedFunctions",
          "type": "Object | null | undefined",
          "description": "Reference to binded functions so we can call removeEventListener on element detached",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 405,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"_onKeypress\":null,\"_onFocus\":null,\"_onBlur\":null}"
        },
        {
          "name": "_hasItemHighBeenCalculated",
          "type": "boolean | null | undefined",
          "description": "Indicates if the the height of each suggestion item has been already calculated.\nThe assumption is that item height is fixed and it will not change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 4
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "__customTplRef",
          "type": "Object | null | undefined",
          "description": "To avoid unnecessary access to the DOM, we keep a reference to the current template being used",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 419,
              "column": 4
            },
            "end": {
              "line": 419,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_template",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 211,
              "column": 1
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        },
        {
          "name": "_suggestionTemplate",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 2
            },
            "end": {
              "line": 565,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 424,
              "column": 2
            },
            "end": {
              "line": 441,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 443,
              "column": 2
            },
            "end": {
              "line": 457,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 459,
              "column": 2
            },
            "end": {
              "line": 468,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getItemText",
          "description": "Get the text property from the suggestion",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 477,
              "column": 2
            },
            "end": {
              "line": 479,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "suggestion",
              "type": "Object",
              "description": "The suggestion item"
            }
          ],
          "return": {
            "type": "String"
          }
        },
        {
          "name": "_showSuggestionsWrapper",
          "description": "Show the suggestions wrapper",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 484,
              "column": 2
            },
            "end": {
              "line": 491,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hideSuggestionsWrapper",
          "description": "Hide the suggestions wrapper",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 496,
              "column": 2
            },
            "end": {
              "line": 506,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_handleSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 508,
              "column": 2
            },
            "end": {
              "line": 511,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_remoteSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 513,
              "column": 2
            },
            "end": {
              "line": 526,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_bindSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 528,
              "column": 2
            },
            "end": {
              "line": 536,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_createSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 538,
              "column": 2
            },
            "end": {
              "line": 555,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_renderSuggestions",
          "description": "Render suggestions in the suggestionsWrapper container",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 572,
              "column": 2
            },
            "end": {
              "line": 592,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "suggestions",
              "type": "Array",
              "description": "An array containing the suggestions to be rendered. This value is not optional, so\n   in case no suggestions need to be rendered, you should either not call this method or provide an empty array."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clearSuggestions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 594,
              "column": 2
            },
            "end": {
              "line": 598,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onSuggestionsChanged",
          "description": "Listener to changes to _suggestions state",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 603,
              "column": 2
            },
            "end": {
              "line": 632,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selection",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 634,
              "column": 2
            },
            "end": {
              "line": 647,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getItems",
          "description": "Get all suggestion elements",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 653,
              "column": 2
            },
            "end": {
              "line": 655,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array",
            "desc": "a list of all suggestion elements"
          }
        },
        {
          "name": "_emptyItems",
          "description": "Empty the list of current suggestions being displayed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 660,
              "column": 2
            },
            "end": {
              "line": 662,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 664,
              "column": 2
            },
            "end": {
              "line": 668,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeActive",
          "description": "Remove the the active state from all suggestion items",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 673,
              "column": 2
            },
            "end": {
              "line": 678,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onKeypress",
          "description": "Key press event handler",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 683,
              "column": 2
            },
            "end": {
              "line": 707,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_keyenter",
          "description": "Event handler for the key ENTER press event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 712,
              "column": 2
            },
            "end": {
              "line": 717,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_moveHighlighted",
          "description": "Move the current highlighted suggestion up or down",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 723,
              "column": 2
            },
            "end": {
              "line": 756,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "direction",
              "type": "string",
              "description": "Possible values are DIRECTION.UP or DIRECTION.DOWN"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_scroll",
          "description": "Move scroll (if needed) to display the active element in the suggestions list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 762,
              "column": 2
            },
            "end": {
              "line": 793,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "direction",
              "type": "string",
              "description": "Direction to scroll. Possible values are `DIRECTION.UP` and `DIRECTION.DOWN`."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resetScroll",
          "description": "Reset scroll back to zero",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 798,
              "column": 2
            },
            "end": {
              "line": 800,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setHighlightedSuggestion",
          "description": "Set the current highlighted suggestion",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 807,
              "column": 2
            },
            "end": {
              "line": 814,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option",
              "type": "Object",
              "description": "Data of the highlighted option"
            },
            {
              "name": "elementId",
              "type": "string",
              "description": "id of the highlighted dom element."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 816,
              "column": 2
            },
            "end": {
              "line": 827,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option"
            },
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onSelect",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 829,
              "column": 2
            },
            "end": {
              "line": 832,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onBlur",
          "description": "Event handler for the onBlur event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 837,
              "column": 2
            },
            "end": {
              "line": 846,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onFocus",
          "description": "Event handler for the onFocus event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 851,
              "column": 2
            },
            "end": {
              "line": 862,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getSuggestionId",
          "description": "Generate a suggestion id for a certain index",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 870,
              "column": 2
            },
            "end": {
              "line": 872,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index",
              "type": "number",
              "description": "Position of the element in the suggestions list"
            }
          ],
          "return": {
            "type": "string",
            "desc": "a unique id based on the _idItemSeed and the position of that element in the suggestions popup"
          }
        },
        {
          "name": "_itemHeightChanged",
          "description": "When item height is changed, the maxHeight of the suggestionWrapper need to be updated",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 877,
              "column": 2
            },
            "end": {
              "line": 879,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "suggestions",
          "description": "Sets the component's current suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 889,
              "column": 2
            },
            "end": {
              "line": 891,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hideSuggestions",
          "description": "Hides the suggestions popup",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 896,
              "column": 2
            },
            "end": {
              "line": 900,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "queryFn",
          "description": "Query function is called on each keystroke to query the data source and returns the suggestions that matches\nwith the filtering logic included.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 909,
              "column": 2
            },
            "end": {
              "line": 934,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "datasource",
              "type": "Array",
              "description": "An array containing all items before filtering"
            },
            {
              "name": "query",
              "type": "string",
              "description": "Current value in the input field"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "an array containing only those items in the data source that matches the filtering logic."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 148,
          "column": 8
        },
        "end": {
          "line": 985,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "for",
          "description": "Id of input",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 4
            },
            "end": {
              "line": 225,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "is-open",
          "description": "`true` if the suggestions list is open, `false otherwise`",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 234,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "min-length",
          "description": "Minimum length to trigger suggestions",
          "sourceRange": {
            "start": {
              "line": 239,
              "column": 4
            },
            "end": {
              "line": 242,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max-viewable-items",
          "description": "Max number of suggestions to be displayed without scrolling",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 250,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "text-property",
          "description": "Property of local datasource to as the text property",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-property",
          "description": "Property of local datasource to as the value property",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 266,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "source",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 4
            },
            "end": {
              "line": 273,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "selected-option",
          "description": "Object containing information about the current selected option. The structure of the object depends on the\n structure of each element in the data source.",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 4
            },
            "end": {
              "line": 282,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "remote-source",
          "description": "Binds to a remote data source",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "event-namespace",
          "description": "Event type separator",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 4
            },
            "end": {
              "line": 298,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "highlighted-suggestion",
          "description": "Current highlighted suggestion. The structure of the object is:\n```\n{\n   elementId: ID // id of the highlighted DOM element\n   option: // highlighted option data\n}\n```",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 4
            },
            "end": {
              "line": 313,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "query-fn",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "sourceRange": {
            "start": {
              "line": 319,
              "column": 5
            },
            "end": {
              "line": 321,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        },
        {
          "name": "highlight-first",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "sourceRange": {
            "start": {
              "line": 326,
              "column": 4
            },
            "end": {
              "line": 329,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-results-on-focus",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "sourceRange": {
            "start": {
              "line": 335,
              "column": 4
            },
            "end": {
              "line": 338,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "autocomplete-blur",
          "description": "Fired on input blur",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-change",
          "description": "Fired on input change",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-focus",
          "description": "Fired on input focus",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-reset-blur",
          "description": "Fired on input reset/clear",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-selected",
          "description": "Fired when a selection is made",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "is-open-changed",
          "description": "Fired when the `isOpen` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-option-changed",
          "description": "Fired when the `selectedOption` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "highlighted-suggestion-changed",
          "description": "Fired when the `highlightedSuggestion` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-autocomplete-suggestions"
    },
    {
      "description": "",
      "summary": "",
      "path": "paper-autocomplete.js",
      "properties": [
        {
          "name": "autoValidate",
          "type": "boolean | null | undefined",
          "description": "`autoValidate` Set to true to auto-validate the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 217,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "Setter/getter manually invalid input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 225,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "autocapitalize",
          "type": "string | null | undefined",
          "description": "`autocapitalize` Sets auto-capitalization for the input element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 229,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "`errorMessage` The error message to display when the input is invalid.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "`label` Text to display as the input label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 17
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "noLabelFloat",
          "type": "boolean | null | undefined",
          "description": "`noLabelFloat` Set to true to disable the floating label.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean | null | undefined",
          "description": "`alwaysFloatLabel` Set to true to always float label",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 4
            },
            "end": {
              "line": 257,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "The placeholder text",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 4
            },
            "end": {
              "line": 262,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "`required` Set to true to mark the input as required.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "`readonly` Set to true to mark the input as readonly.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 4
            },
            "end": {
              "line": 278,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "focused",
          "type": "boolean | null | undefined",
          "description": "`focused` If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "`disabled` Set to true to mark the input as disabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "source",
          "type": "Array | null | undefined",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 4
            },
            "end": {
              "line": 303,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_sourceChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the text property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 4
            },
            "end": {
              "line": 311,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\""
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "Property of local datasource to as the value property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"value\""
        },
        {
          "name": "value",
          "type": "Object | null | undefined",
          "description": "`value` Selected object from the suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "text",
          "type": "string | null | undefined",
          "description": "The current/selected text of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 4
            },
            "end": {
              "line": 336,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "disableShowClear",
          "type": "boolean | null | undefined",
          "description": "Disable showing the clear X button",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 344,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "remoteSource",
          "type": "boolean | null | undefined",
          "description": "Binds to a remote data source",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 4
            },
            "end": {
              "line": 352,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "eventNamespace",
          "type": "string | null | undefined",
          "description": "Event type separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 4
            },
            "end": {
              "line": 360,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"-\""
        },
        {
          "name": "minLength",
          "type": "number | null | undefined",
          "description": "Minimum length to trigger suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 4
            },
            "end": {
              "line": 368,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "pattern",
          "type": "string | null | undefined",
          "description": "`pattern` Pattern to validate input field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "allowedPattern",
          "type": "string | null | undefined",
          "description": "allowedPattern` allowedPattern to validate input field",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "charCounter",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to show a character counter.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 383,
              "column": 4
            },
            "end": {
              "line": 386,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "The maximum length of the input value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 393,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Name to be used by the autocomplete input. This is necessary if wanted to be integrated with iron-form.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 4
            },
            "end": {
              "line": 398,
              "column": 16
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "queryFn",
          "type": "Function | null | undefined",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 406,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          }
        },
        {
          "name": "highlightFirst",
          "type": "boolean | null | undefined",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 5
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "showResultsOnFocus",
          "type": "boolean | null | undefined",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 420,
              "column": 4
            },
            "end": {
              "line": 423,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_value",
          "type": "?",
          "description": "TODO: check if we need _value and _text properties. It seems they can be removed",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 4
            },
            "end": {
              "line": 431,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_text",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 433,
              "column": 4
            },
            "end": {
              "line": 435,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_isClearButtonVisible",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the clear button is visible or not",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 440,
              "column": 4
            },
            "end": {
              "line": 443,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_isSuggestionsOpened",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the suggestion popup is visible or not.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 448,
              "column": 4
            },
            "end": {
              "line": 451,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "selectedOption",
          "type": "Object | null | undefined",
          "description": "Object containing the information of the currently selected option",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 4
            },
            "end": {
              "line": 459,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_template",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 2
            },
            "end": {
              "line": 206,
              "column": 1
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_sourceChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 2
            },
            "end": {
              "line": 479,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newSource"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "ready",
          "description": "Element Lifecycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 482,
              "column": 2
            },
            "end": {
              "line": 489,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_clear",
          "description": "Clears the input text",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 494,
              "column": 2
            },
            "end": {
              "line": 513,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireEvent",
          "description": "Dispatches autocomplete events",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 518,
              "column": 2
            },
            "end": {
              "line": 529,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option"
            },
            {
              "name": "evt"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_textObserver",
          "description": "On text event handler",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 534,
              "column": 2
            },
            "end": {
              "line": 540,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onAutocompleteSelected",
          "description": "On autocomplete selection",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 545,
              "column": 2
            },
            "end": {
              "line": 550,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_showClearButton",
          "description": "Show the clear button (X)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 555,
              "column": 2
            },
            "end": {
              "line": 566,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hideClearButton",
          "description": "Hide the clear button (X)",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 571,
              "column": 2
            },
            "end": {
              "line": 578,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 580,
              "column": 2
            },
            "end": {
              "line": 584,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getOption",
          "description": "Gets the current text/value option of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 594,
              "column": 2
            },
            "end": {
              "line": 599,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Object"
          }
        },
        {
          "name": "setOption",
          "description": "Sets the current text/value option of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 605,
              "column": 2
            },
            "end": {
              "line": 609,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "option",
              "type": "Object"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disable",
          "description": "Disables the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 614,
              "column": 2
            },
            "end": {
              "line": 616,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "enable",
          "description": "Enables the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 621,
              "column": 2
            },
            "end": {
              "line": 623,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "suggestions",
          "description": "Sets the component's current suggestions",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 629,
              "column": 2
            },
            "end": {
              "line": 631,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "arr",
              "type": "Array"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "validate",
          "description": "Validates the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 637,
              "column": 2
            },
            "end": {
              "line": 639,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "clear",
          "description": "Clears the current input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 644,
              "column": 2
            },
            "end": {
              "line": 648,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "reset",
          "description": "Resets the current input (DEPRECATED: please use clear)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 653,
              "column": 2
            },
            "end": {
              "line": 655,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hideSuggestions",
          "description": "Hides the suggestions popup",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 660,
              "column": 2
            },
            "end": {
              "line": 663,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "onSelectHandler",
          "description": "Allows calling the onSelect function from outside\nThis in time triggers the autocomplete-selected event\nwith all the data required",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 670,
              "column": 2
            },
            "end": {
              "line": 672,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 135,
          "column": 8
        },
        "end": {
          "line": 723,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "attributes": [
        {
          "name": "auto-validate",
          "description": "`autoValidate` Set to true to auto-validate the input value.",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 4
            },
            "end": {
              "line": 217,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "invalid",
          "description": "Setter/getter manually invalid input",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 4
            },
            "end": {
              "line": 225,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "autocapitalize",
          "description": "`autocapitalize` Sets auto-capitalization for the input element.",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 229,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "error-message",
          "description": "`errorMessage` The error message to display when the input is invalid.",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "label",
          "description": "`label` Text to display as the input label",
          "sourceRange": {
            "start": {
              "line": 241,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 17
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "no-label-float",
          "description": "`noLabelFloat` Set to true to disable the floating label.",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 4
            },
            "end": {
              "line": 249,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "always-float-label",
          "description": "`alwaysFloatLabel` Set to true to always float label",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 4
            },
            "end": {
              "line": 257,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "placeholder",
          "description": "The placeholder text",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 4
            },
            "end": {
              "line": 262,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "required",
          "description": "`required` Set to true to mark the input as required.",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "readonly",
          "description": "`readonly` Set to true to mark the input as readonly.",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 4
            },
            "end": {
              "line": 278,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "focused",
          "description": "`focused` If true, the element currently has focus.",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 287,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "disabled",
          "description": "`disabled` Set to true to mark the input as disabled.",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 4
            },
            "end": {
              "line": 295,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "source",
          "description": "`source` Array of objects with the options to execute the autocomplete feature",
          "sourceRange": {
            "start": {
              "line": 300,
              "column": 4
            },
            "end": {
              "line": 303,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "text-property",
          "description": "Property of local datasource to as the text property",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 4
            },
            "end": {
              "line": 311,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-property",
          "description": "Property of local datasource to as the value property",
          "sourceRange": {
            "start": {
              "line": 316,
              "column": 4
            },
            "end": {
              "line": 319,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value",
          "description": "`value` Selected object from the suggestions",
          "sourceRange": {
            "start": {
              "line": 324,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "text",
          "description": "The current/selected text of the input",
          "sourceRange": {
            "start": {
              "line": 332,
              "column": 4
            },
            "end": {
              "line": 336,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disable-show-clear",
          "description": "Disable showing the clear X button",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 344,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "remote-source",
          "description": "Binds to a remote data source",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 4
            },
            "end": {
              "line": 352,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "event-namespace",
          "description": "Event type separator",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 4
            },
            "end": {
              "line": 360,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "min-length",
          "description": "Minimum length to trigger suggestions",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 4
            },
            "end": {
              "line": 368,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "pattern",
          "description": "`pattern` Pattern to validate input field",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 373,
              "column": 19
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "allowed-pattern",
          "description": "allowedPattern` allowedPattern to validate input field",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "char-counter",
          "description": "Set to `true` to show a character counter.",
          "sourceRange": {
            "start": {
              "line": 383,
              "column": 4
            },
            "end": {
              "line": 386,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.",
          "sourceRange": {
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 393,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "name",
          "description": "Name to be used by the autocomplete input. This is necessary if wanted to be integrated with iron-form.",
          "sourceRange": {
            "start": {
              "line": 398,
              "column": 4
            },
            "end": {
              "line": 398,
              "column": 16
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "query-fn",
          "description": "Function used to filter available items. This function is actually used by paper-autocomplete-suggestions,\nit is also exposed here so it is possible to provide a custom queryFn.",
          "sourceRange": {
            "start": {
              "line": 404,
              "column": 4
            },
            "end": {
              "line": 406,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        },
        {
          "name": "highlight-first",
          "description": "If `true`, it will always highlight the first result each time new suggestions are presented.",
          "sourceRange": {
            "start": {
              "line": 411,
              "column": 5
            },
            "end": {
              "line": 414,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "show-results-on-focus",
          "description": "Set to `true` to show available suggestions on focus. This overrides the default behavior that only shows\nnotifications after user types",
          "sourceRange": {
            "start": {
              "line": 420,
              "column": 4
            },
            "end": {
              "line": 423,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "selected-option",
          "description": "Object containing the information of the currently selected option",
          "sourceRange": {
            "start": {
              "line": 456,
              "column": 4
            },
            "end": {
              "line": 459,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "autocomplete-blur",
          "description": "Fired on input blur",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-change",
          "description": "Fired on input change",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-focus",
          "description": "Fired on input focus",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-reset-blur",
          "description": "Fired on input reset/clear",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "autocomplete-selected",
          "description": "Fired when a selection is made",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "text-changed",
          "description": "Fired when the `text` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "selected-option-changed",
          "description": "Fired when the `selectedOption` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-autocomplete"
    }
  ]
}
